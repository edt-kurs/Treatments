
&НаСервере
Процедура ВыполнитьКомандуНаСервере()
	
	СписокЦенАкций = РеквизитФормыВЗначение("Объект");
	Операция = Строка("СписокЦенАкций."+ Операции+ "()");
	Если ЗначениеЗаполнено(Операция) Тогда
		Операция = Строка("СписокЦенАкций."+"МВВБАкцииЦеныЗагрузкаЦен"+"()");
	КонецЕсли;
	
	Выполнить(Операция);
	
	//ЦеныАкций.Загрузить(СписокЦенАкций.ЦеныАкций.Выгрузить());
	ЗначениеВРеквизитФормы(СписокЦенАкций,"Объект");
	//ОбработкаЦены = Обработки.investing.Создать();
	//ОбработкаЦены.finamПоАкциям();
	//
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере1()
	
	//Путь = "https://ru.investing.com/equities/sberbank_rts";
	//Путь = "https://www.dohod.ru/ik/analytics/dividend/";
	
	ДокументHTML = ВыполнитьHTTPЗапрос(Путь);
	//Соединение = Новый HTTPСоединение("ru.investing.com",,"Evgen_g21@mail.ru","Zaq12wsx",,,
	//        Новый ЗащищенноеСоединениеOpenSSL());  

	Соединение = Новый HTTPСоединение("ru.investing.com",,"Evgen_g21@mail.ru","Zaq12wsx",,,
	        Новый ЗащищенноеСоединениеOpenSSL());  

	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie"," ses_id=OXdmJ2RrPjZlIW1rMGE1NzBkNmQ%2FP2BjMTkwNjA0b3lidmNtZTI%2BeGJtaSdmZWJ%2BMmRkZzZhNjVlMzc%2BZmc0NTk9ZjNkMD5hZWFtNzA1NTMwYTY%2BPztgZTExMDEwYm80YmVjM2UwPj5iN2lkZmhibzIgZHg2cjYnZTc3Z2YnNHM5NmYnZDc%2BNGUxbWcwZjU2MGk2aT86YGAxOTA2MDJvd2Ip");
	Запрос = Новый HTTPЗапрос("/portfolio/",Заголовки);
	Результат = Соединение.Получить(Запрос);
	Первый = Результат.ПолучитьТелоКакСтроку();
	Первый1 = ПолучитьДокументHTML(Первый);
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	Структура = Новый Структура;
	//Структура.Вставить("ИмяКласса","lighterGrayFont noBold");
	 Фильтр = "{
            |    ""type"": ""intersection"", 
            |    ""value"": 
            |    [
            |        { 
            |            ""type"": ""elementname"", 
            |            ""value"": 
            |            { 
            |                ""value"": ""arial_16 midNum pid-13711-last"",
            |                ""operation"": ""equals""
            |            }, 
            |        }
            |        ,
            |        { 
            |            ""type"": ""hasattribute"", 
            |            ""value"": 
            |            { 
            |                ""value"": ""arial_16 midNum pid-13711-last"",
            |                ""operation"": ""nameequals""
            |            }     
            |        }
            |        ,
            |        { 
            |            ""type"": ""hasattribute"", 
            |            ""value"": 
            |            { 
            |                ""value"": ""arial_16 midNum pid-13711-last"",
            |                ""operation"": ""valueequals""
            |            }     
            |        }
            |    ]
            |}";
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	//ЗаписьJSON(Структура,,,Новый ПараметрыЗаписиJSON(,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON,Структура,НастройкиСериализации);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	//
	Фильтр1 = СформироватьФильтрПоКлассуТега(,"fl_header_pair",Ложь);
	ТЗ2 = Первый1.ПолучитьЭлементПоИдентификатору("5844749_ask_13711");
	ТЗ1 = Первый1.ПолучитьЭлементыПоИмени("td");
	ТекВремя = ТекущаяДата();
	Для каждого ТЗСтрока из ТЗ1 Цикл
		//Сбер
		Если ТЗСтрока.Идентификатор = "5844749_ask_13711" Тогда
			
			Сбербанк= ТЗСтрока.ТекстовоеСодержимое;
			
		ИначеЕсли ТЗСтрока.Идентификатор = "5844749_ask_102063" Тогда
			
			Яндекс= ТЗСтрока.ТекстовоеСодержимое;
			
		ИначеЕсли ТЗСтрока.Идентификатор = "5844749_ask_13684" Тогда
			
			Газпром = ТЗСтрока.ТекстовоеСодержимое;
			
		ИначеЕсли ТЗСтрока.Идентификатор = "5844749_ask_13717" Тогда
			
			ГазпромНефть = ТЗСтрока.ТекстовоеСодержимое;
			
		ИначеЕсли ТЗСтрока.Идентификатор = "5844749_ask_1057204" Тогда
			
			
			СургутНефть = ТЗСтрока.ТекстовоеСодержимое;
			
		КонецЕсли;
		 
//"inlineblock pid-13711-bid"
//"inlineblock pid-13711-ask"
//"inlineblock pid-13711-low"
//"inlineblock pid-13711-high"
	КонецЦикла;
	КОнецВремся = ТекущаяДата();
	ВремяПрохода = (КОнецВремся-ТекВремя);
	//Сообщить(Строка(ВремяПрохода)+": Цена"+askКласс +"Мин"+lowКласс+"Макс"+highКласс );
	ТЗ2 = ТЗ1.Элемент(1);
	//
	//Для Каждого ТЗ из ТЗ1 Цикл
	//	
	//	Сообщить(ТЗ.ТекстовоеСодержимое);
	//	
	//КонецЦикла;
	
	//ТЗ = ДокументHTML.ПолучитьЭлементыПоИмени("span");
	//ТекЦена = ДокументHTML.ПолучитьЭлементПоИдентификатору("menu-main").ТекстовоеСодержимое;
	
	// Вставить содержимое обработчика.
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКоманду(Команда)
	ВыполнитьКомандуНаСервере();
КонецПроцедуры

Функция СформироватьФильтрПоКлассуТега(Тег, Класс, ТочноеСоответствие = Истина)  

   ВидПоиска = ?(ТочноеСоответствие = Истина, "valueequals", "valuematchesregex");

   ИмяКласс = ?(ТочноеСоответствие = Истина, Класс, Класс+".+");


   ПараметрыПоиска = Новый Структура("type,value", "intersection", Новый Массив);

	  //ПараметрыПоиска.value.Добавить(Новый Структура("type,value", "elementname", Новый Структура("value,operation", Тег, "equals")));

	  //ПараметрыПоиска.value.Добавить(

	  //   Новый Структура("type,value", "hasattribute",

	  //      Новый Структура("value,operation", "class", "nameequals")));

      ПараметрыПоиска.value.Добавить(Новый Структура("type,value","hasattribute",

         Новый Структура("value,operation", ИмяКласс,ВидПоиска)));

      Запись = Новый ЗаписьJSON;

      Запись.УстановитьСтроку();

      ЗаписатьJSON(Запись, ПараметрыПоиска);

      Фильтр = Запись.Закрыть();

      Возврат Фильтр;

  КонецФункции

  
Функция ВыполнитьHTTPЗапрос(Путь) Экспорт 
	
	Если ЗначениеЗаполнено(Путь) тогда
	////ПолныйАдресРесурса = Объект.СсылкаНаСайт+Путь[0].Название;
	ПолныйАдресРесурса = Путь;
	 
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	//СтруктураURI = СтруктураURI("https://ru.investing.com/portfolio/?portfolioID=NzcxajVnM2s%2FbjkxMGo%3D");
	//HTTPЗапрос = Новый HTTPЗапрос("/api.php?action=direct&subno=" + НомерТелефонаДляПередачиВЗапрос);
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	//Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Авто),
	//Новый СертификатыУдостоверяющихЦентровWindows());
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,"Evgen_g21@mail.ru","Eaq12wsx",,5,ЗащищенноеСоединение);		
	//HTTPСоединение = Новый HTTPСоединение("potoksms.ru", 443, , ,  ,  , ЗащищенноеСоединение);
	//HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie"," ses_id=OXdmJ2RrPjZlIW1rMGE1NzBkNmQ%2FP2BjMTkwNjA0b3lidmNtZTI%2BeGJtaSdmZWJ%2BMmRkZzZhNjVlMzc%2BZmc0NTk9ZjNkMD5hZWFtNzA1NTMwYTY%2BPztgZTExMDEwYm80YmVjM2UwPj5iN2lkZmhibzIgZHg2cjYnZTc3Z2YnNHM5NmYnZDc%2BNGUxbWcwZjU2MGk2aT86YGAxOTA2MDJvd2Ip");
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере,Заголовки); 
	Попытка
		Сообщить("1");
		Результат 		= HTTPСоединение.Получить(HTTPЗапрос);
		ТекстСтраницы 	= Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		ДокументHTML	= ПолучитьДокументHTML(ТекстСтраницы);
		
	Исключение
//Сообщить("Исключение");
			 // исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
			 ////Сообщить("Произошла сетевая ошибка!");
			 //ВызватьИсключение;
	КонецПопытки;
	 
	КонецЕсли;
	//Сообщить("Конец: " + ТекущаяДата()+ТЗАкции.Акция);

	//ТекЦена = ОбработкаЧислаКотировок(СтрЗаменить(ДокументHTML.ПолучитьЭлементПоИдентификатору("fl_header_pair_lst").ТекстовоеСодержимое,".",""));
	Возврат ДокументHTML;
//Сообщить(ТекущаяДата() - НачалаПроцесса);
////КонецЦикла;
//Сообщить("Версия: 2");
КонецФункции


Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапроситьФайлыССервера(СерверИсточникПараметр, СтрокаПараметраПолученияПараметр, ИмяВходящегоФайлаПараметр, HTTP = Неопределено) Экспорт 

СерверИсточник = СерверИсточникПараметр; 
СтрокаПараметраПолучения = СтрокаПараметраПолученияПараметр; 
ИмяВходящегоФайла = ИмяВходящегоФайлаПараметр; 
Попытка 
aUrlRequest = "http://" + СерверИсточникПараметр + "/" + СтрокаПараметраПолучения; 

//oXMLHTTP = Новый COMОбъект("MSXML2.XMLHTTP"); 
//oXMLHTTP.open("GET",aUrlRequest, False ); 
//oXMLHTTP.Send(); 
//FSO = Новый COMОбъект("Scripting.FileSystemObject"); 
//Fso.CreateTextFile(ИмяВходящегоФайла,True); 
//FileFso =Fso.OpenTextFile(ИмяВходящегоФайла,2,True); 
//FileFso.writeline(oXMLHTTP.responseText); 

Возврат Истина; 
Исключение 
Возврат Ложь; 
КонецПопытки; 


КонецФункции 

Функция ПолучитьДокументHTML(СтрокаHTML)
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(СтрокаHTML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЧтениеHTML.Закрыть();
	
Возврат ДокументHTML;

 

КонецФункции
  
Функция ОбработкаЧислаКотировок(Строка2)Экспорт
	
	Точка 	= Найти(Строка2, ".");
	Запятая = Найти(Строка2, ",");
	
	Если ЗначениеЗаполнено(Точка) и ЗначениеЗаполнено(Запятая) тогда
		
		Строка2 = СтрЗаменить(Строка2,".","");
		
	ИначеЕсли Не ЗначениеЗаполнено(Точка) и ЗначениеЗаполнено(Запятая) тогда
		
		
		
	ИначеЕсли ЗначениеЗаполнено(Точка) и Не ЗначениеЗаполнено(Запятая) тогда
		
		Строка2 = СтрЗаменить(Строка2,".",",");
		
	КонецЕсли;
	
	Возврат Строка2;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Путь) Тогда
		Путь = "https://www.finam.ru/quote/moex-akcii/sberbank/";
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуМВВБ(Команда)
	ВыполнитьКомандуМВВБНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуМВВБНаСервере()
	
	СписокЦенАкций = РеквизитФормыВЗначение("Объект");
	Операция = Строка("СписокЦенАкций."+ ОперацииМВВБ+ "()");
	Выполнить(Операция);
	Акции.Загрузить(СписокЦенАкций.Акции.Выгрузить());
	ЗначениеВРеквизитФормы(СписокЦенАкций,"Объект");
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАкцииНаСервере()
	
	Для каждого СТрокаТЗ Из Акции Цикл
		
		ПоискАкции = Справочники.МВВБАкции.НайтиПоНаименованию(СТрокаТЗ.SHORTNAME, Истина);
		Если ЗначениеЗаполнено(ПоискАкции) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяАкция = Справочники.МВВБАкции.СоздатьЭлемент();
		НоваяАкция.Наименование = СТрокаТЗ.SHORTNAME;
		ЗаполнитьЗначенияСвойств(НоваяАкция,СТрокаТЗ);
		НоваяАкция.Записать();
		
	КонецЦикла;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАкции(Команда)
	ЗагрузитьАкцииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексыНаСервере()
	

	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИндексы(Команда)
	ЗаполнитьИндексыНаСервере();
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()
	//СписокЦенАкций = РеквизитФормыВЗначение("Объект");
	//ЗначениеВРеквизитФормы(СписокЦенАкций,"Объект");
	Отчет.Вывести(ОтчетыСКД.МВВБ(ТекущаяДата())); // Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	СформироватьОтчетНаСервере();
КонецПроцедуры
